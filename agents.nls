extensions [array]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.

  possible_next_stops ; List containing all possible next stops (i.e. list of bus_stop turtles) from the current_stop (if current stop is -1,
                      ; possible_next_stops will be applied to the previous stop
  long_term_path ; List containing the route the bus is taking for the next few moves
  route_type ; integer denoting the type of route the bus is taking
  next_intended_stop ; a next_stop style variable that we are allowed to modify
  distances ;
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  set distances n-values length graph [dijkstra ?]
  set long_term_path sort bus_stops
  set next_intended_stop 9
  set route_type 0
  if ticks = 300 or ticks = 350 [ set route_type 1 ]
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]] 
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  
  ;adding new buses at time intervals 
  make-new-buses
  
  ;checking if the bus is at a stop
  if current_stop >= 0 [ 
    
    ;dropping off any passengers who want to be at the stop
    drop-off-correct-passengers
    
    ;doing the actions of the bus relative to its route
    actions-for-route self 
  ]
  ;travelling to the next stop
  if bus_id != 24 and ticks mod 15 = 0 [ 
  send-message 24 long_term_path
  ]
  travel-to next_intended_stop         
end

;_________________________________________________________________________________________________

to-report dijkstra [vertexFrom]
  let Q  n-values 24 [?]
  let S []
  
  let dist array:from-list n-values length graph [1000000] ; should be infinity but large number will work
  let prev array:from-list n-values length graph [0] ;
  
  array:set dist vertexFrom 0
  
  while [length Q != 0] [
    ; let l filter [not member? ? S] Q
    ; print l
    let v one-of Q
    
    foreach Q [ ; find lowest distance which is not visited yet
      if array:item dist ? < array:item dist v [
         set v ?
      ]
    ]
    set Q remove v Q
    ; set S lput v S ; add u to visited nodes
    
    let adjacent item v graph
    foreach adjacent [
      if (array:item dist v + get-distance ? v) < array:item dist ? [
        array:set dist ? array:item dist v + get-distance ? v
        array:set prev  ? v
      ]
    ]
  ]
 
  let result []
  set result lput prev result
  set result lput dist result
  report result
end

;_________________________________________________________________________________________________


to drop-off-correct-passengers
  foreach bus_passengers [ 
      if item 1 ? = current_stop [ 
        drop-off-passenger item 0 ? 
      ] 
    ]
end

to make-new-buses
  if bus_id = 24 [ 
    set route_type 0
      if ticks >= 0 [ 
        if ticks mod 10 = 0 [ 
          ifelse ticks = 300 or ticks = 350
          [ repeat 1 [add-bus 3] ]
          [repeat 1 [ add-bus (3) ] ]
        ]
      ]
  ]
end

;________________________________________________________________________________________________

to actions-for-route [bus]
  if length long_term_path = 0 or length bus_passengers = 0 [
    set long_term_path sort bus_stops
  ]
  
  if route_type = 0 [
    ;picking up passengers with destinations on the route (until bus is full)
    let available_passengers get-passengers-at-stop current_stop
    foreach available_passengers [ 
      if not has-reached-capacity? self [
        if not is-number? long_term_path [
          if member? bus_stop item 1 ? long_term_path [
            pick-up-passenger item 0 ?
          ]
        ]
      ]
    ]
    
    ;getting a list of the possible next stops
    set possible_next_stops (sort [link-neighbors] of bus_stop current_stop)
      
    ;picking one of these at random  
    let random_index random length possible_next_stops
    let selected_stop (item random_index possible_next_stops)
    set next_intended_stop ([who] of selected_stop)
    
    ;choosing the path based on where the passengers want to go
    let passenger_wishes where-are-passengers-on-bus-going self
    let majority_preference 0
    let majority_destination -1
    let index n-values 24 [?]
    foreach index [
      if item ? passenger_wishes > majority_preference [ 
        set majority_preference item ? passenger_wishes
        set majority_destination ? 
      ]
    ]    
    if majority_destination != -1 [ 
      set long_term_path shortest-path (bus_stop current_stop) (bus_stop majority_destination)
      set long_term_path but-first long_term_path
      if length long_term_path > 0 [ 
        set next_intended_stop [who] of (item 0 long_term_path)
      ] 
    ]
    if next_intended_stop = 8 and current_stop = 9 [
      set next_intended_stop 3
      foreach bus_passengers [
        let destination item 1 ?
        if destination = 8 or destination = 6 or destination = 2 [
          drop-off-passenger item 0 ?
        ]
      ]
    ]
    if current_stop = 9 [
      set available_passengers get-passengers-at-stop current_stop
      foreach available_passengers [ 
        let destination item 1 ?
        if not has-reached-capacity? self [ 
          if destination != 8 and destination != 6 and destination != 2 [
            pick-up-passenger item 0 ?
          ]
        ]
      ]
    ]
  ]
  
  if route_type = 1 [
    ifelse current_stop = 9 or current_stop = 8 or current_stop = 6 or current_stop = 2
    
    [
      if current_stop = 9 [
        ;dropping off passengers
        foreach bus_passengers [
          let destination item 1 ?
          if destination != 9 and destination != 8 and destination != 6 and destination != 2 [
            drop-off-passenger item 0 ?
          ]
        ]
        
        ;picking up passengers
        let available_passengers get-passengers-at-stop current_stop
        foreach available_passengers [ 
          let destination item 1 ?
          if destination = 9 or destination = 8 or destination = 6 or destination = 2 [
            if not has-reached-capacity? self [
              pick-up-passenger item 0 ?
            ]
          ]
        ]
        
        ;next stop is fixed
        set next_intended_stop 8
        
      ]
      if current_stop = 8 or current_stop = 6 or current_stop = 2 [ 
        ;picking up passengers
        let available_passengers get-passengers-at-stop current_stop
        foreach available_passengers [ 
          let destination item 1 ?
          if not has-reached-capacity? self [
            pick-up-passenger item 0 ?
          ]
        ]
        ;picking a random next stop
        set possible_next_stops (sort [link-neighbors] of bus_stop current_stop)  
        let random_index random length possible_next_stops
        let selected_stop (item random_index possible_next_stops)
        set next_intended_stop ([who] of selected_stop)
        
        if previous_stop = 9 [       
          ;set next stop
          ifelse length get-passengers-at-stop 2 > length get-passengers-at-stop 6
          [ set next_intended_stop 2 ]
          [ set next_intended_stop 6 ]
        ]
        
        if has-reached-capacity? self [  
          set long_term_path shortest-path (bus_stop current_stop) (bus_stop 9)
          set long_term_path but-first long_term_path
          set next_intended_stop [who] of (item 0 long_term_path)
        ]
      ]
    ]
    
    [
      set long_term_path shortest-path (bus_stop current_stop) (bus_stop 9)
      set long_term_path but-first long_term_path
      set next_intended_stop [who] of (item 0 long_term_path)
      
      let available_passengers get-passengers-at-stop current_stop
      foreach available_passengers [ 
        let destination item 1 ?
        if destination = 9 or destination = 8 or destination = 6 or destination = 2 [
            pick-up-passenger item 0 ?
        ]
      ]
    ]
  ]
end

;__________________________________________________________________________________________________________________________________________

;returns true if the bus has reached capacity, false otherwise
to-report has-reached-capacity? [bus]
  let truth_value false
  let capacity 0
  if bus_type = 1 [set capacity 12]
  if bus_type = 2 [set capacity 60]
  if bus_type = 3 [set capacity 150]
  if length bus_passengers = capacity [ 
    set truth_value true
    ]
  report truth_value
end

;function which calculates shortest path between two bus stops
;IMPLEMENTATION of LRTA* (from section 2.1 of shoham and leyton-brown)
to-report shortest-path [bs1 bs2]
  if bs1 = bs2 [ show "NO NEED TO CALCULATE: THE BUS STOPS ARE THE SAME" ]
  let backpointers item 0 (item [who] of bs1 distances)
  let node_pointer [who] of bs2
  let full_path []
  set full_path lput [who] of bs2 full_path
  while [array:item backpointers node_pointer != [who] of bs1] [
    set node_pointer (array:item backpointers node_pointer)
    set full_path lput node_pointer full_path
  ]
  report map [bus_stop(?)] full_path
end

;function which takes in a bus stop id and returns a list corresponding to how many passengers
;at the bus stop want to go to each of the 24 destinations
to-report where-are-passengers-at-stop-going [bs_id]
  ;initialising the output list
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  
  ;getting a list of the passengers at the stop
  let passenger_list get-passengers-at-stop bs_id
  foreach passenger_list [ 
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

;function which takes in a bus (the actual turtle) and returns a list corresponding to how many passengers
;on the bus want to go to each of the 24 destinations
to-report where-are-passengers-on-bus-going [bus]
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  foreach bus_passengers [
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

