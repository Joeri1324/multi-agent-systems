;PLEASE NOTE: this is NOT the version of the system we want used in the competition; that version can be found in the "competition_agents.nls" file
;this is the version of our MAS system for assessment in the project (i.e. it is not optimised, but has various interesting features)
extensions [array]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.

  long_term_path ; List containing the route the bus is taking for the next few moves
  beneficial_destinations ;
  next_intended_stop ; a next_stop style variable that we are allowed to modify
  bus_size;

  distances ;  
  belief; array which indexes
  desire;
  intention;
  
  route_type; indexes which route (not strictly needed, but often easier than writing out the full route)
  route_path; if on route, specific route it follows
  mode; indexes whether on route or on free travel mode
  score; number of passengers the bus has dropped off at their final destination
  num_passengers_dropped_off; number of passengers dropped off in total
  num_passengers_picked_up; number of passengers picked up in total
  num_passengers_could_not_pick_up
  total_num_buses
  distance_from_destination ;used for negotiations/argumentation
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  set bus_size int item (bus_type - 1) [12 60 150]
  set long_term_path []
  set next_intended_stop -1
  set beneficial_destinations []
  set total_num_buses 1
  
  set num_passengers_dropped_off 0
  set score 0
  set num_passengers_picked_up 0
  set mode 1
  
  if ticks = 2 [ set mode 0 ]
  ifelse mode = 1 [ set intention "free movement" ][ set intention "routed" ]
  if ticks = 2 [ set route_type 0 ]
;  if ticks = 3 [ set route_type 1 ]
;  if ticks = 4 [ set route_type 2 ]
;  if ticks = 5 [ set route_type 3 ]
;  if ticks = 6 [ set route_type 4 ]
;  if ticks = 7 [ set route_type 5 ]
;  if ticks = 8 [ set route_type 6 ]
;  if ticks = 9 [ set route_type 7 ]
;  if ticks = 10 [ set route_type 0 ]
  set route_path making-route
  
  foreach filter [? >= 24] n-values who [?] [
    send-message ? ["-inform-" "-(string) bus count update-" "new bus"]
  ]
  
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  set distances n-values length graph [dijkstra ?] 
end

;-------------------------------------------------------------------------------------------------------------------------
;MAIN FUNCTION
;-------------------------------------------------------------------------------------------------------------------------


to execute-actions  
  ;adding new buses at time intervals 
  make-new-buses
  
  count-buses
  
  ;initiating bargaining
  if bus_id = 24 [ initiate-bargaining ]
  
  ;checking if the bus is at a stop
  if current_stop >= 0 [ 
    
    ;dropping off all passengers
    drop-off-all-passengers
    
    ;routed buses fix their next stop in this way
    if mode = 0 [
      move-along-route route_path
    ]
    
    ;"free mode" buses fix their next stop in this way
    if mode = 1 and intention != "following orders" [ 
      navigate
    ]
    
    ;acting on a message received from the boss / random movement (meaning the free mode buses will move to a chokepoint)
    if intention = "following orders" [ 
      set long_term_path shortest-path current_stop desire
      ifelse length long_term_path = 1 [
        set intention "free movement"
        navigate
      ]
      [
        set next_intended_stop item 1 long_term_path
      ]
    ]
    
    if bus_id != 24 and mode = 1 [ 
      enter-into-negotiation
      respond-to-negotiation
    ]
    
    set num_passengers_could_not_pick_up 0
    
    ;picking up the passengers who benefit most from going to where the bus is going next
    pick-up-optimal-passengers
    
    ;picking up the passengers who still benefit from going to where the bus is going next
    pick-up-beneficial-passengers
    
    ;waiting for more passengers to arrive if not full yet
    if length bus_passengers < (bus_size * 0.9) and intention = "free movement" [
      if ticks mod 15 >= 13 [
        set next_intended_stop -1
      ]
    ]
  ] 
  
  ;voting for a new bus every 10 ticks
  if ticks mod 15 = 14 [ cast-vote ]
  
  ;aggregator bus checks every tick to see if vote is successful
  aggregate-vote
  
  ;travelling to the next stop, if there is one
  if next_intended_stop != -1
  [
  travel-to next_intended_stop
  ]         
end

;_________________________________________________________________________________________________
;NAVIGATION FOR ROUTES
;_________________________________________________________________________________________________

;this function determines how buses on routes behave
to move-along-route [ dummy_route_path ]
  let stops_involved_in_route []
  foreach n-values (length dummy_route_path) [?] [
    if item ? dummy_route_path != [] [
      set stops_involved_in_route lput ? stops_involved_in_route
    ]
  ]
  
  ifelse member? current_stop stops_involved_in_route [
    let next_stops item current_stop dummy_route_path
    let max_passengers_waiting -1
    let busiest_stop -1
    if length next_stops > 1 [ set next_stops remove previous_stop next_stops ]
    foreach next_stops [ 
      let num_passengers_waiting length get-passengers-at-stop ?
      if num_passengers_waiting > max_passengers_waiting [ 
        set max_passengers_waiting num_passengers_waiting
        set busiest_stop ?   
      ]
    ]
    set next_intended_stop busiest_stop
    set long_term_path (list next_intended_stop)
    
    let busiest_stop_on_route -1
    let num_passengers_waiting_at_busiest_stop_on_route -1
    foreach stops_involved_in_route [
      let num_passengers_at_stop length get-passengers-at-stop ?
      if num_passengers_at_stop > num_passengers_waiting_at_busiest_stop_on_route [
        set busiest_stop_on_route ?
        set num_passengers_waiting_at_busiest_stop_on_route num_passengers_at_stop
      ]
    ]
    if num_passengers_waiting_at_busiest_stop_on_route = 0 and length bus_passengers = 0 [
      set next_intended_stop -1
    ]
  ]  
  [
    set long_term_path shortest-path current_stop one-of stops_involved_in_route
    set next_intended_stop item 1 long_term_path
  ]
end

;this function makes a route based on a route type (this could be done directly, but this way makes it more customizable)
;note: a route is represented as a list of lists of possible next stops for each stop involved in the route
to-report making-route
  set route_path []
  repeat 24 [ set route_path lput [] route_path ]
  
  if route_type = 0 [
    set route_path [[] [] [8] [9] [] [] [8] [] [9 2 6] [3 8] [] [] [] [] [] [] [] [] [] [] [] [] [] []]
  ]
  if route_type = 1 [
    set route_path [[] [] [] [] [] [] [] [] [] [] [17 21] [17] [15 22] [10 22] [] [12 18] [] [10 11] [15] [] [] [10 22] [12 21] []]
  ]
  if route_type = 2 [
    set route_path [[14 22] [] [] [4] [3 10] [] [] [] [] [3 20] [4 13] [] [] [10 23] [0 23] [] [] [] [] [] [9 21] [20 22] [0 21] [13 14]]
  ]
  if route_type = 3 [
    set route_path [[14 22] [] [] [9] [3 10] [] [] [] [] [3 20] [4 13] [] [] [10 23] [0 23] [] [] [] [] [] [9 21] [20 22] [0 21] [13 14]]
  ]
  if route_type = 4 [
    set route_path [[] [] [] [] [] [] [] [13 17] [] [] [] [17] [15 22] [7 22] [] [12 18] [] [7 11] [15] [] [] [] [12 13] []]
  ]
  if route_type = 5 [
    set route_path [[] [7 19] [] [4] [3 5] [4 17] [] [1 17] [] [] [] [] [] [] [] [] [] [5 7] [] [1] [] [] [] []]
  ]
  if route_type = 6 [
    set route_path [[] [] [] [] [] [] [] [] [] [] [] [] [15 20] [] [] [12 18] [] [] [15] [] [12] [] [] []]
  ]
  if route_type = 7 [
    set route_path [[] [] [] [16] [3] [4] [] [] [] [] [] [] [] [] [] [] [5] [] [] [] [] [] [] []]
  ]
  report route_path
end

;_________________________________________________________________________________________________
;NAVIGATION FOR FREE MODE
;________________________________________________________________________________________________

;this procedure is the most important component of the MAS. It determines where buses move.
to navigate
    ;getting a list of the possible next stops
    let possible_next_stops item current_stop graph
      
    ;going to the stop with the most people waiting
    let max_people_waiting -1
    let busiest_next_stop -1  
    foreach possible_next_stops [
      let num_people_waiting length get-passengers-at-stop ?
      let adjusted_count num_people_waiting / get-distance current_stop ?
      if adjusted_count > max_people_waiting [
        set max_people_waiting adjusted_count
        set busiest_next_stop ?
      ]
    ]    
    ifelse max_people_waiting = 0 and length bus_passengers = 0 [ 
      set next_intended_stop -1
    ]
    [ 
      set next_intended_stop busiest_next_stop
    ]

    let majority_destination calculate-preferred-next-destination current_stop
    
    if majority_destination != -1 and majority_destination != current_stop [ 
      ;set long_term_path shortest-path current_stop majority_destination 
      ;set next_intended_stop (item 1 long_term_path)
      set next_intended_stop majority_destination
    ]
    
    ;occasionally heading to a busy stop (weighted by passenger count)
    maby-head-to-busy-stop
end

to maby-head-to-busy-stop
  if random 8 = 0 [
    let passengers_waiting_at_each_stop map [ item 1 ? ] passengers-waiting-at-each-stop
    let passenger_destinations_in_system where-are-passengers-in-system-going
    set passenger_destinations_in_system (map [? / 2] passenger_destinations_in_system)
    let adjusted_passenger_destinations (map / passengers_waiting_at_each_stop passenger_destinations_in_system)
    set adjusted_passenger_destinations map ceiling adjusted_passenger_destinations
    if max passengers_waiting_at_each_stop != 0 [
      let stop_chosen choose-stop-by-probability adjusted_passenger_destinations
      set desire stop_chosen
      set intention "following orders"
      set distance_from_destination length-of-path shortest-path current_stop desire
      ;send-message 24 list current_stop desire
    ]
  ]
end

;__________________________________________________________________________________________________________________________________________
;FREE MODE NAVIGATION UTILS
;__________________________________________________________________________________________________________________________________________

to-report choose-stop-by-probability [ passenger_list ]
  let total_number_of_passengers sum passenger_list
  let stop_chosen 3
  let random_number random total_number_of_passengers + 1  
  foreach n-values length passenger_list [?] [
    if random_number > 0 [
      set random_number random_number - item ? passenger_list
      set stop_chosen ?
    ]
  ] 
  report stop_chosen
end

to-report passengers-waiting-at-each-stop
  report map [list ? length get-passengers-at-stop ?] n-values 24 [?]
end

to count-buses
  set total_num_buses length filter [item 2 item 2 ? = "new bus"] inbox
  set total_num_buses total_num_buses + (who - 24 + 1)
end

to-report votes-for-next-destination [current_stop_id]
  let votes []
  let possible_next_stops item current_stop_id graph
  foreach n-values 24 [?] [
    let destination ?
    let current_min_distance length-of-path shortest-path current_stop_id destination
    let current_preferred_destination -1
    foreach possible_next_stops [
      let new_distance length-of-path shortest-path ? destination
      if new_distance < current_min_distance [
        set current_min_distance new_distance
        set current_preferred_destination ?
      ]
    ]
      set votes lput current_preferred_destination votes
  ]
  report votes
end

to-report calculate-preferred-next-destination [ current_stop_id ]
  let preferred_next_destination -1
  let counts []
  repeat 24 [ set counts lput 0 counts ]
  let passengers_here get-passengers-at-stop current_stop_id
  let votes_for_next_destination votes-for-next-destination current_stop_id
  let possible_next_stops item current_stop_id graph
  foreach passengers_here [
    let destination item 1 ?
    foreach possible_next_stops [
      if item destination votes_for_next_destination = ? [
        set counts replace-item ? counts (item ? counts + 1)
      ]
    ]
  ]
  if max counts != 0 [
    set preferred_next_destination position (max counts) counts
  ]
  report preferred_next_destination
end


to-report where-are-passengers-in-system-going
  let destinations []
  repeat 24 [ set destinations lput 1 destinations ]
  foreach n-values 24 [?] [
    set destinations (map + (where-are-passengers-at-stop-going ?) destinations)
  ]
  report destinations
end

;function which takes in a bus stop id and returns a list corresponding to how many passengers
;at the bus stop want to go to each of the 24 destinations
to-report where-are-passengers-at-stop-going [bs_id]
  ;initialising the output list
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  
  ;getting a list of the passengers at the stop
  let passenger_list get-passengers-at-stop bs_id
  foreach passenger_list [ 
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

;function which takes in a bus (the actual turtle) and returns a list corresponding to how many passengers
;on the bus want to go to each of the 24 destinations
to-report where-are-passengers-on-bus-going [bus]
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  foreach bus_passengers [
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

to-report destinations-that-should-be-on-bus
  let destinations_list []
  foreach n-values 24 [?] [
    let is_benefit false
    let current_distance_from_destination length-of-path (shortest-path current_stop ?)
    set distance_from_destination length-of-path (shortest-path next_intended_stop ?)
    if distance_from_destination < current_distance_from_destination [ 
      set is_benefit true
    ]
    if is_benefit [ 
      set destinations_list lput ? destinations_list
    ]
  ]
  report destinations_list
end

;__________________________________________________________________________________________________________________________________________
;PICK-UPS and DROP-OFFS
;__________________________________________________________________________________________________________________________________________

to drop-off-all-passengers
  foreach bus_passengers [ 
    drop-off-passenger item 0 ?
    set num_passengers_dropped_off num_passengers_dropped_off + 1
  ]
end

to pick-up-optimal-passengers
  let votes_for_next_destination votes-for-next-destination current_stop
  let passengers_here get-passengers-at-stop current_stop
  foreach passengers_here [
    if item (item 1 ?) votes_for_next_destination = next_intended_stop [
      if length bus_passengers != bus_size [
        pick-up-passenger item 0 ?
        set num_passengers_picked_up num_passengers_picked_up + 1
      ]
    ]
  ]
end

to pick-up-beneficial-passengers
;calculating beneficial destinations based on where the bus is going next
  if next_intended_stop != -1 [
    set beneficial_destinations destinations-that-should-be-on-bus
  ]
  ;picking up passengers who would benefit from getting on the bus
  let passengers_here get-passengers-at-stop current_stop
  foreach passengers_here [
    if member? item 1 ? beneficial_destinations [
      ifelse length bus_passengers != bus_size [
        pick-up-passenger item 0 ?
        set num_passengers_picked_up num_passengers_picked_up + 1
      ]
      [
        set num_passengers_could_not_pick_up (num_passengers_could_not_pick_up + 1)
      ]
    ]
  ]
end

;__________________________________________________________________________________________________________________________________________
;VOTING SYSTEM (METHODS FOR ADDING NEW BUSES)
;__________________________________________________________________________________________________________________________________________
to make-new-buses
  if bus_id = 24 [ 
      if ticks <= 10 and ticks != 2 [ 
        add-bus 2
        set total_num_buses total_num_buses + 1
      ]
      if ticks = 2 [
        add-bus 3
        set total_num_buses total_num_buses + 1
      ]
  ]
end

to aggregate-vote
  let recent_votes []
  let special_votes []
  if bus_id = 24 [
    if length inbox > 0 [
      set recent_votes filter [ item 0 ? = ticks - 1 ] inbox
      set special_votes filter [item 2 item 2 ? = "special vote for new bus" ] recent_votes
    ]
    let passengers_waiting_at_each_stop map [ item 1 ? ] passengers-waiting-at-each-stop
    let num_passengers_in_system sum passengers_waiting_at_each_stop
    ifelse length special_votes >= floor (0.5 * (total_num_buses - 1)) and total_num_buses > 5 [
      show word "SPECIAL VOTE IN PROGRESS at time: " ticks
      repeat 5 * floor (num_passengers_in_system / (total_num_buses * 60)) [ 
        if random 1440 > ticks + 200 [ 
          add-bus 3
          show "SYSTEM AT HIGH CAPACITY: adding new big bus"
        ]
      ]
    ]
    [
      if length recent_votes >= floor (0.5 * (total_num_buses - 1)) and total_num_buses > 5 [
        show word "NORMAL VOTE IN PROGRESS at time: " ticks
        repeat 5 * floor (num_passengers_in_system / (total_num_buses * 60)) [ 
          if random 1440 > ticks + 200 [ 
            add-bus 2
            show "SYSTEM AT CAPACITY: adding new bus"
          ]
        ]
      ]
    ]
  ]
end

to cast-vote
  if num_passengers_could_not_pick_up >= (0.05 * bus_size) and num_passengers_could_not_pick_up < bus_size and bus_id != 24 [
    send-message 24 ["-inform-" "-(string) cast vote-" "vote for new bus"]
  ]
  if num_passengers_could_not_pick_up > (0.5 * bus_size) and bus_id != 24 [
    send-message 24 ["-inform-" "-(string) cast vote-" "special vote for new bus"]
  ]
end

;__________________________________________________________________________________________________________________________________________
;BARGAINING SYSTEM
;__________________________________________________________________________________________________________________________________________

to initiate-bargaining
  if bus_id = 24 [
    if length inbox > 0 [
      let recent_random_destinations filter [ item 0 ? >= ticks - 3 and  item 1 item 2 ? = "-(list) directions-"] inbox
      let numbers_for_each_destination []
      repeat 24 [ set numbers_for_each_destination lput [] numbers_for_each_destination ]
      foreach recent_random_destinations [
        let sender item 1 ?
        let message_content item 2 item 2 ?
        set numbers_for_each_destination replace-item (item 1 message_content) numbers_for_each_destination lput sender item (item 1 message_content) numbers_for_each_destination
      ]
      foreach numbers_for_each_destination [
        let buses_in_negotiation ?
        if length buses_in_negotiation > 1 [
          foreach buses_in_negotiation [
            if ? != 24 [
              send-message ? lput buses_in_negotiation list "-inform-" "-(int) buses in negotiation-" 
            ]
          ]
        ]
      ]
    ]
  ]
end

to enter-into-negotiation
  let recent_messages filter [ item 0 ? = ticks - 1 and is-list? item 2 ? ] inbox
  let buses_in_negotiation []
  foreach recent_messages [
    let sender item 1 ?
    let message_content item 2 item 2 ?
    if sender = 24 [
      set buses_in_negotiation message_content
    ]
  ]
  foreach buses_in_negotiation [
    if ? != bus_id [
      send-message ? lput distance_from_destination list "-inform-" "(int) distance from destination" 
    ]
  ]
end

to respond-to-negotiation
  let recent_messages filter [ item 0 ? = ticks - 1 and is-number? item 2 ? ] inbox
  if length recent_messages > 0 [
    let distances_of_negotiators []
    foreach recent_messages [
      set distances_of_negotiators lput item 2 ? distances_of_negotiators
    ]
    let num_passengers_at_stop length get-passengers-at-stop last long_term_path
    let num_negotiators length distances_of_negotiators
    if max distances_of_negotiators < distance_from_destination and num_passengers_at_stop < (num_negotiators * 60) [
      set intention "free movement"
      navigate
    ]
  ]
end

;__________________________________________________________________________________________________________________________________________
;SHORTEST PATH ALGORITHM
;__________________________________________________________________________________________________________________________________________

; looks up the shortest path in the distances where the result
; of running dijkstra algorithm on the entire graph is stored
; iterates on the backpointer array reveresly to form the 
; shortest path and returns it.
to-report shortest-path [bs1 bs2]
  if bs1 = bs2 [ 
    report (list bs1)
  ]
  let backpointers item 0 (item bs1 distances)
  let node_pointer bs2
  let full_path []
  set full_path lput bs2 full_path
  while [array:item backpointers node_pointer != bs1] [
    set node_pointer (array:item backpointers node_pointer)
    set full_path lput node_pointer full_path
  ]
  set full_path lput bs1 full_path
  report reverse full_path
end

; Implementation of shortest path algorithm by dijkstra
; https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
to-report dijkstra [vertexFrom]
  let Q  n-values 24 [?]
  let S []
  
  let dist array:from-list n-values length graph [1000000] 
  let prev array:from-list n-values length graph [0] ;
  
  array:set dist vertexFrom 0
  
  while [length Q != 0] [
    let v one-of Q
    foreach Q [ 
      if array:item dist ? < array:item dist v [
         set v ?
      ]
    ]
    set Q remove v Q
    let adjacent item v graph
    foreach adjacent [
      if (array:item dist v + get-distance ? v) < array:item dist ? [
        array:set dist ? array:item dist v + get-distance ? v
        array:set prev ? v
      ]
    ]
  ]
 
  let result []
  set result lput prev result
  set result lput dist result
  report result
end

;path is represented as a list of bus_stop ids (e.g. [ 3 4 5 16 ])
to-report length-of-path [ path ]
  report sum (map [get-distance item ?1 path item ?2 path] (n-values (length path - 1) [?]) (n-values (length path - 1) [? + 1]))
end