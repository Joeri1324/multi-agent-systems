buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  added-bus
]
 
globals [graph]

to init-buses
  set added-bus 0
  ; Initialize your agents here.
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  let at_bus_stop current_stop != -1
  
  if length bus_passengers = 12 and bus_type = 1 and added-bus = 0 [
    add-bus 3
    set added-bus 1
  ]
  if length bus_passengers = 60 and bus_type = 2 and added-bus = 0 [
    add-bus 2
    set added-bus 1
  ]
  if length bus_passengers = 150 and bus_type = 3 and added-bus = 0 [
    add-bus 1
    set added-bus 1
  ]
  
  ifelse at_bus_stop [
    let passengers_at_stop get-passengers-at-stop current_stop
    
    foreach passengers_at_stop [ 
      let passenger_id item 0 ? 
      pick-up-passenger passenger_id
    ]
    
    foreach bus_passengers [
      let desired_stop item 1 ?
      let passenger_id item 0 ?
      if desired_stop = current_stop [
        drop-off-passenger passenger_id
      ]
    ]
    
    let next_stops item current_stop graph
    travel-to one-of next_stops
  ]
  [
    travel-to next_stop
  ]
end