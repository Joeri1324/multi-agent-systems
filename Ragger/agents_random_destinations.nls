__includes["utils.nls"]
extensions [array table]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  capacity
  vote
  added_bus
  instructions_given
  dijkstra_out
  destination
  stops
  upcoming_stop
  travel_along
  max_buses
]
 
globals [graph]

to init-buses
  set capacity int item (bus_type - 1) [12 60 150]
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
   ; Distance array, e.g. "distances 2 7" is the shortest path distance from bus stop 2 to bus stop 7
  set dijkstra_out n-values length graph [dijkstra ?]
  set stops [0]
  set added_bus 0
  set max_buses 12  
end


; Create new bus
to make-new-bus
  if count buses < max_buses and added_bus = 0 [
    add-bus 2
    set added_bus 1
  ]
end

; Returns an array for the next bus stop in which each destination is flagged as better/closer (1) or worse (0)
to-report next-stop-better [current_bs next_bs]
  let current_distances n-values length graph [distance-from-to current_bs ?]
  let next_distances n-values length graph [distance-from-to next_bs ?]
  report (map [?1 - ?2 > 0] current_distances next_distances)
end

; Returns the distance precalculated with Dijkstra's algorithm
to-report distance-from-to [bs1 bs2]
    report array:item (item 1 (item bs1 dijkstra_out)) bs2
end

; Get a new destination (there can be multiple tactics to choose this)
to get-new-destination
  set destination random length graph
end

; Update route (called when arrived at a bus stop)
to update-route
  set stops (remove (first stops) stops)
  ifelse length stops > 0 [  ; not at destination
    set upcoming_stop first stops
  ]
  [ 
    get-new-destination
    while [destination = current_stop] [
      get-new-destination  
    ]
    let path shortest-path current_stop destination
    set stops remove first path path
    set upcoming_stop first stops
  ]
end
 
to execute-actions
  
  make-new-bus
 
  ; Check if at bus stop
  let at_bus_stop current_stop != -1
  
  if at_bus_stop [
    update-route
    
    ; Get distance info of who to pick up and drop off
    set travel_along next-stop-better current_stop upcoming_stop
    
    ; Drop off traveling passengers
    foreach bus_passengers [
      let passenger_destination item 1 ?
      if not (item passenger_destination travel_along)[
        drop-off-passenger item 0 ?
      ]
    ]
    
    ; Pick up waiting passengers
    foreach get-passengers-at-stop current_stop [
      let passenger_destination item 1 ?
      if (item passenger_destination travel_along and length bus_passengers < capacity)[
        pick-up-passenger item 0 ?
      ]
    ]
    
  ] 
  
  travel-to upcoming_stop
  
end