;This is the competition version of our multi-agent system. Please run this file when evaluating our system against those of the other teams.
extensions [array]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  long_term_path ; List containing the route the bus is taking for the next few moves
  beneficial_destinations ;
  next_intended_stop ; a next_stop style variable that we are allowed to modify
  bus_size;
  distances ;
  desire; used when in "following orders" mode
  intention; used when in "following orders" mode
  total_num_buses
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  set bus_size int item (bus_type - 1) [12 60 150]
  set long_term_path []
  set next_intended_stop -1
  set beneficial_destinations []
  set total_num_buses 1
  set intention "free movement"
  
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  set distances n-values length graph [dijkstra ?] 
end

to execute-actions
  
  ;adding new buses initially, then if needed 
  make-new-buses
  
  ;checking if the bus is at a stop
  if current_stop >= 0 [ 
    ;dropping off all passengers
    foreach bus_passengers [ 
      drop-off-passenger item 0 ?
    ]
    
    ;"free mode" buses fix their next stop in this way
    if intention != "following orders" [ 
      navigate
    ]
    
    ;acting on a message received from the boss / random movement (meaning the free mode buses will move to a chokepoint)
    if intention = "following orders" [ 
      set long_term_path shortest-path current_stop desire
      ifelse length long_term_path = 1 [
        set intention "free movement"
        navigate
      ]
      [
        set next_intended_stop item 1 long_term_path
      ]
    ]
    
    ;picking up passengers going to the majority destination
    let passengers_here get-passengers-at-stop current_stop 
    let votes_for_next_destination votes-for-next-destination current_stop
    
    foreach passengers_here [
      if item (item 1 ?) votes_for_next_destination = next_intended_stop [
        if length bus_passengers != bus_size [
          pick-up-passenger item 0 ?
        ]
      ]
    ]
    
    if next_intended_stop != -1 [
      ;calculating based on where the bus is going next
      set beneficial_destinations destinations-that-should-be-on-bus
    ]
    
    ;picking up passengers who would benefit from getting on the bus
    set passengers_here get-passengers-at-stop current_stop
    foreach passengers_here [
      if member? item 1 ? beneficial_destinations [
        if length bus_passengers != bus_size [
          pick-up-passenger item 0 ?
        ]
      ]
    ]
    if length bus_passengers < bus_size and intention = "free movement" [
      if ticks mod 15 >= 13 and ticks < 1425 [
        set next_intended_stop -1
      ]
    ]
  ]
  
  if next_intended_stop != -1
  [
  ;travelling to the next stop
  travel-to next_intended_stop
  ]         
end

;_________________________________________________________________________________________________

;_________________________________________________________________________________________________

;_________________________________________________________________________________________________-

to-report destinations-that-should-be-on-bus
  let destinations_list []
  foreach n-values 24 [?] [
    let is_benefit false
    let current_distance_from_destination length-of-path (shortest-path current_stop ?)
    let distance_from_destination length-of-path (shortest-path next_intended_stop ?)
    if distance_from_destination < current_distance_from_destination [ 
      set is_benefit true
    ]
    if is_benefit [ 
      set destinations_list lput ? destinations_list
    ]
  ]
  report destinations_list
end

to make-new-buses
  if bus_id = 24 [ 
      if ticks <= 40 [ 
        add-bus 2
        set total_num_buses total_num_buses + 1
      ]
      if ticks mod 15 = 14 [
        let passengers_waiting_at_each_stop map [ item 1 ? ] passengers-waiting-at-each-stop
        let num_passengers_in_system sum passengers_waiting_at_each_stop
        if num_passengers_in_system > total_num_buses * 30 [
          repeat 10 * floor (num_passengers_in_system / (total_num_buses * 60)) [
            if random 1440 > (ticks + 300) [
              add-bus 2
              show word "ADDING BUS at time: " ticks
              set total_num_buses total_num_buses + 1
            ]
          ]
        ]
      ]
  ]
end

;________________________________________________________________________________________________

;________________________________________________________________________________________________

to navigate
    ;getting a list of the possible next stops
    let possible_next_stops item current_stop graph
      
    ;going to the stop with the most people waiting
    let max_people_waiting -1
    let busiest_next_stop -1  
    foreach possible_next_stops [
      let num_people_waiting length get-passengers-at-stop ?
      let adjusted_count num_people_waiting / get-distance current_stop ?
      if adjusted_count > max_people_waiting [
        set max_people_waiting adjusted_count
        set busiest_next_stop ?
      ]
    ]    
    ifelse max_people_waiting = 0 and length bus_passengers = 0 [ 
      set next_intended_stop -1
    ]
    [ 
      set next_intended_stop busiest_next_stop
    ]

    let majority_destination calculate-preferred-next-destination current_stop
    if majority_destination != -1 and majority_destination != current_stop [ 
      set next_intended_stop majority_destination
    ]
    
    ;occasionally heading to a busy stop (weighted by passenger count)
    if random 6 = 0 [
      let passengers_waiting_at_each_stop map [ item 1 ? ] passengers-waiting-at-each-stop
      let passenger_destinations_in_system where-are-passengers-in-system-going
      set passenger_destinations_in_system (map [? / 2] passenger_destinations_in_system)
      let adjusted_passenger_destinations (map / passengers_waiting_at_each_stop passenger_destinations_in_system)
      set adjusted_passenger_destinations map ceiling adjusted_passenger_destinations
      if max passengers_waiting_at_each_stop != 0 [
        let stop_chosen choose-stop-by-probability adjusted_passenger_destinations
        let distances_from_all_destinations sort distances-from-all-destinations stop_chosen
        ifelse (length-of-path shortest-path current_stop stop_chosen > item 13 distances_from_all_destinations) [
          navigate
        ]
        [
        set desire stop_chosen
        set intention "following orders"
        ]
      ]
    ]
end

;__________________________________________________________________________________________________________________________________________

to-report choose-stop-by-probability [ passenger_list ]
  let total_number_of_passengers sum passenger_list
  let stop_chosen 3
  let random_number random total_number_of_passengers + 1  
  foreach n-values length passenger_list [?] [
    if random_number > 0 [
      set random_number random_number - item ? passenger_list
      set stop_chosen ?
    ]
  ] 
  report stop_chosen
end

to-report passengers-waiting-at-each-stop
  let passengers_waiting_at_each_stop []
  foreach n-values 24 [?] [
    set passengers_waiting_at_each_stop lput list ? length get-passengers-at-stop ? passengers_waiting_at_each_stop
  ]
  report passengers_waiting_at_each_stop
end

to-report votes-for-next-destination [current_stop_id]
  let votes []
  let possible_next_stops item current_stop_id graph
  foreach n-values 24 [?] [
    let destination ?
    let current_min_distance length-of-path shortest-path current_stop_id destination
    let current_preferred_destination -1
    foreach possible_next_stops [
      let new_distance length-of-path shortest-path ? destination
      if new_distance < current_min_distance [
        set current_min_distance new_distance
        set current_preferred_destination ?
      ]
    ]
      set votes lput current_preferred_destination votes
  ]
  report votes
end

to-report calculate-preferred-next-destination [ current_stop_id ]
  let preferred_next_destination -1
  let counts []
  repeat 24 [ set counts lput 0 counts ]
  let passengers_here get-passengers-at-stop current_stop_id
  let votes_for_next_destination votes-for-next-destination current_stop_id
  let possible_next_stops item current_stop_id graph
  foreach passengers_here [
    let destination item 1 ?
    foreach possible_next_stops [
      if item destination votes_for_next_destination = ? [
        set counts replace-item ? counts (item ? counts + 1)
      ]
    ]
  ]
  if max counts != 0 [
    set preferred_next_destination position (max counts) counts
  ]
  report preferred_next_destination
end

to-report where-are-passengers-in-system-going
  let destinations []
  repeat 24 [ set destinations lput 1 destinations ]
  foreach n-values 24 [?] [
    set destinations (map + (where-are-passengers-at-stop-going ?) destinations)
  ]
  report destinations
end

to-report shortest-path [bs1 bs2]
  if bs1 = bs2 [ 
    report (list bs1)
  ]
  let backpointers item 0 (item bs1 distances)
  let node_pointer bs2
  let full_path []
  set full_path lput bs2 full_path
  while [array:item backpointers node_pointer != bs1] [
    set node_pointer (array:item backpointers node_pointer)
    set full_path lput node_pointer full_path
  ]
  set full_path lput bs1 full_path
  report reverse full_path
end

to-report dijkstra [vertexFrom]
  let Q  n-values 24 [?]
  let S []
  
  let dist array:from-list n-values length graph [1000000] ; should be infinity but large number will work
  let prev array:from-list n-values length graph [0] ;
  
  array:set dist vertexFrom 0
  
  while [length Q != 0] [
    ; let l filter [not member? ? S] Q
    ; print l
    let v one-of Q
    
    foreach Q [ ; find lowest distance which is not visited yet
      if array:item dist ? < array:item dist v [
         set v ?
      ]
    ]
    set Q remove v Q
    ; set S lput v S ; add u to visited nodes
    
    let adjacent item v graph
    foreach adjacent [
      if (array:item dist v + get-distance ? v) < array:item dist ? [
        array:set dist ? array:item dist v + get-distance ? v
        array:set prev  ? v
      ]
    ]
  ]
 
  let result []
  set result lput prev result
  set result lput dist result
  report result
end

;function which takes in a bus stop id and returns a list corresponding to how many passengers
;at the bus stop want to go to each of the 24 destinations
to-report where-are-passengers-at-stop-going [bs_id]
  ;initialising the output list
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  
  ;getting a list of the passengers at the stop
  let passenger_list get-passengers-at-stop bs_id
  foreach passenger_list [ 
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

;function which takes in a bus (the actual turtle) and returns a list corresponding to how many passengers
;on the bus want to go to each of the 24 destinations
to-report where-are-passengers-on-bus-going [bus]
  let destinations []
  repeat 24 [ set destinations lput 0 destinations ]
  foreach bus_passengers [
    let passenger_destination item 1 ?
    set destinations replace-item passenger_destination destinations ((item passenger_destination destinations) + 1)
  ]
  report destinations
end

;path is represented as a list of bus_stop ids (e.g. [ 3 4 5 16 ])
to-report length-of-path [ path ]
  let pairwise_lengths []
  foreach n-values (length path - 1) [?] [
    set pairwise_lengths lput (get-distance item ? path item (? + 1) path) pairwise_lengths
  ]
  report sum pairwise_lengths
end

to-report distances-from-all-destinations [bs_id]
  let distances_from_all_destinations []
  foreach n-values 24 [?] [
    set distances_from_all_destinations lput length-of-path shortest-path ? bs_id distances_from_all_destinations
  ]
  report distances_from_all_destinations
end